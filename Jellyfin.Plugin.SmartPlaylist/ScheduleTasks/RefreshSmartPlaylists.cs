using Jellyfin.Data.Entities;
using Jellyfin.Data.Enums;
using Jellyfin.Plugin.SmartPlaylist.Infrastructure;
using Jellyfin.Plugin.SmartPlaylist.Interfaces;
using Jellyfin.Plugin.SmartPlaylist.Models.Dto;
using MediaBrowser.Controller;
using MediaBrowser.Controller.Entities;
using MediaBrowser.Controller.Library;
using MediaBrowser.Controller.Playlists;
using MediaBrowser.Controller.Providers;
using MediaBrowser.Model.IO;
using MediaBrowser.Model.Playlists;
using MediaBrowser.Model.Tasks;

namespace Jellyfin.Plugin.SmartPlaylist.ScheduleTasks;

public class RefreshSmartPlaylists : IScheduledTask, IConfigurableScheduledTask {
	private readonly IFileSystem _fileSystem;
	private readonly ILibraryManager _libraryManager;
	private readonly ILogger _logger;
	private readonly IPlaylistManager _playlistManager;
	private readonly ISmartPlaylistStore _plStore;
	private readonly IProviderManager _providerManager;
	private readonly IUserManager _userManager;

	public RefreshSmartPlaylists(IFileSystem fileSystem,
							   ILibraryManager libraryManager,
							   ILogger<RefreshSmartPlaylists> logger,
							   IPlaylistManager playlistManager,
							   IProviderManager providerManager,
							   IServerApplicationPaths serverApplicationPaths,
							   IUserManager userManager) {
		_fileSystem = fileSystem;
		_libraryManager = libraryManager;
		_logger = logger;
		_playlistManager = playlistManager;
		_providerManager = providerManager;
		_userManager = userManager;

		ISmartPlaylistFileSystem plFileSystem = new SmartPlaylistFileSystem(serverApplicationPaths);
		_plStore = new SmartPlaylistStore(plFileSystem, logger);
	}

	private string CreateNewPlaylist(SmartPlaylistDto dto, User user, IReadOnlyList<Guid> items) {
		var req = new PlaylistCreationRequest {
			Name = dto.Name,
			UserId = user.Id,
			ItemIdList = items,
		};

		var foo = _playlistManager.CreatePlaylist(req);

		return foo.Result.Id;
	}

	private IEnumerable<BaseItem> GetAllUserMedia(User user, BaseItemKind[] itemTypes) {
		var query = new InternalItemsQuery(user) {
			IncludeItemTypes = itemTypes,
			Recursive = true,
		};

		return _libraryManager.GetItemsResult(query).Items;
	}

	public bool IsHidden => false;

	public bool IsEnabled => true;

	public bool IsLogged => true;

	public string Key => nameof(RefreshSmartPlaylists);

	public string Name => "Refresh all SmartPlaylist";

	public string Description => "Refresh all SmartPlaylists Playlists";

	public string Category => "Smart Playlist 2 Playlist Harder";

	// TODO check for creation of schedule json file. Isn't created currently and won't execute until it is.
	public IEnumerable<TaskTriggerInfo> GetDefaultTriggers() {
		return new[] {
				new TaskTriggerInfo {
						IntervalTicks = TimeSpan.FromMinutes(30).Ticks,
						Type          = TaskTriggerInfo.TriggerInterval
				}
		};
	}

	public async Task ExecuteAsync(IProgress<double> progress, CancellationToken cancellationToken) {
		try {
			var dtos = await _plStore.GetAllSmartPlaylistAsync();

			for (var index = 0; index < dtos.Length; index++) {
				await ProcessPlaylist(progress, dtos[index], index, dtos.Length);
			}
		}
		catch (Exception ex) {
			_logger.LogError(ex, "Error processing playlists");
		}
	}

	private async Task ProcessPlaylist(IProgress<double> progress, SmartPlaylistDto dto, int index, int length) {
		ReportPercentage(0);

		if (dto.IsReadonly) {
			ReportPercentage(100);

			return;
		}

		var smartPlaylist = new Models.SmartPlaylist(dto);

		var user = _userManager.GetUserByName(smartPlaylist.User);
		ReportPercentage(10);
		List<Playlist> p = new();

		try {
			var playlists = _playlistManager.GetPlaylists(user.Id);
			p.AddRange(playlists.Where(x => x.Id.ToString("N") == dto.Id));
			ReportPercentage(20);
		}
		catch (NullReferenceException ex) {
			_logger.LogError(ex,
							 "No user named {User} found, please fix playlist {PlaylistName}",
							 dto.User,
							 dto.Name);

			return;
		}

		if ((dto.Id == null) || !p.Any()) {
			_logger.LogInformation("Playlist ID not set, creating new playlist");
			ReportPercentage(40);
			var plId = CreateNewPlaylist(dto, user, GetPlaylistItems(smartPlaylist, user));
			dto.Id = plId;
			ReportPercentage(50);
			await _plStore.SaveAsync(dto);
			ReportPercentage(100);
			return;
		}

		ReportPercentage(40);

		var playlist = p.First();
		await _playlistManager.RemoveFromPlaylistAsync(playlist.Id.ToString(), playlist.LinkedChildren.Select(b => b.Id));
		ReportPercentage(50);

		playlist.Tagline = $"{dto.Name} Generated by {SmartPlaylistConsts.PLUGIN_NAME}";

		var newItems = GetPlaylistItems(smartPlaylist, user);
		ReportPercentage(75);

		await _playlistManager.AddToPlaylistAsync(playlist.Id, newItems, user.Id);

		ReportPercentage(95);
		QueueRefresh(playlist.Id);
		ReportPercentage(100);

		void ReportPercentage(double percent) {
			//Used to report, arbitrary percent values, to indicate that the job is progressing, although not an accurate estimation.
			progress.ReportPercentage(length, index, percent);
		}
	}


	private Guid[] GetPlaylistItems(Models.SmartPlaylist smartPlaylist, User user) =>
			smartPlaylist.FilterPlaylistItems(GetAllUserMedia(user, smartPlaylist.SupportedItems),
											  _libraryManager,
											  user).ToArray();


	public void QueueRefresh(Guid playlistId) {
		_providerManager.QueueRefresh(playlistId,
									  new(new DirectoryService(_fileSystem)) {
										  ForceSave = true,
										  ReplaceAllImages = true,
									  },
									  RefreshPriority.High);
	}
}
